----------------------------------------01/24/2022---------------------------------------------------------------------------------

Data type:
**********
Variables can store data of different types, and different types can do different things.

types data types: 
*****************

Text Type:	str
Numeric Types:	int, float, complex
Sequence Types:	list, tuple, range
Mapping Type:	dict
Set Types:	set, frozenset
Boolean Type:	bool
Binary Types:	bytes, bytearray, memoryview

Example:
a = 5
print(type(a))
print(type(5.0))

output:
<class 'int'>
<class 'float'>

comments single/multi line comment:
***********************************
Comments can be used to explain Python code, make the code more readable and prevent execution when testing code.

Single Line:
#This is a comment
print("Hello, World!")

Multi Line:

#This is a comment
#written in
#more than just one line
print("Hello, World!")

Docstrings:
***********

Python docstrings are the string literals that appear right after the definition of a function, method, class, or module.

def square(n):
    '''Takes in a number n, returns the square of n'''
    return n**2

print(square.__doc__)

Output

Takes in a number n, returns the square of n

--------------------------------------01/25/2022----------------------------------------------------------------------------------------
compiler vs interpreter
***********************
Interpreter translates just one statement of the program at a time into machine code. Compiler scans the entire program and translates 
the whole of it into machine code at once. An interpreter takes very less time to analyze the source code. 
A compiler always generates an intermediary object code

python 2 and python 3:
*********************
Python 2 has more complicated syntax than Python 3. Python 3 has an easier syntax compared to Python 2. 
A lot of libraries of Python 2 are not forward compatible. A lot of libraries are created in Python 3 to be strictly used with Python 3

Python2:
print “Hello world”
>>Hello world
Python3:
print(“Hello world”)
>>Hello world

study in detail about print function:
************************************

The print() function prints the specified message to the screen, or other standard output device.

The message can be a string, or any other object, the object will be converted into a string before written to the screen.

print("Hello", "how are you?")
print("Hello", "how are you?", sep="---")

study in detail about input function:
************************************

The input() function:

Use the input() function to get Python user input from keyboard
Press the enter key after entering the value.
The program waits for user input indefinetly, there is no timeout.
The input function returns a string, that you can store in a variable
Terminate with Ctrl-D (Unix) or Ctrl-Z+Return (Windows)
--------------------------------------01/26/2022-- Holiday--------------------------------------------------------------------------------------
--------------------------------------01/27/2022----------------------------------------------------------------------------------------

study in detail about input function:
*************************************

The input() function:

Use the input() function to get Python user input from keyboard
Press the enter key after entering the value.
The program waits for user input indefinetly, there is no timeout.
The input function returns a string, that you can store in a variable
Terminate with Ctrl-D (Unix) or Ctrl-Z+Return (Windows)

a=float(input("enter the float value:"))
print("The float value is:",a)

Data type conversion (int to float,bool,string):
************************************************

#int to Floor conversion
print("Start of Interger Data type conversion")
print("Data type conversion of Integer to Floor")
a = 10
b = float(a)
print(a)
print(type(a))
print(b)
print(type(b))
#int to bool conversion
print("Data type conversion of Integer to Boolean")
a = 10
b = bool(a)
print(a)
print(type(a))
print(b)
print(type(b))

#int to str conversion
print("Data type conversion of Integer to String")
a = 10
a = str(a)
print(a)
print(type(a))
print(b)
print(type(b))

print("End of Interger Data type conversion")

#floor to int conversion
print("Start of Floor Data type conversion")
print("Data type conversion of Floor to Integer")
a = 10.5
b = int(a)
print(a)
print(type(a))
print(b)
print(type(b))
#floor to bool conversion
print("Data type conversion of Floor to Boolean")
a = 10.5
b = bool(a)
print(a)
print(type(a))
print(b)
print(type(b))

#floor to str conversion
print("Data type conversion of Floor to String")
a = 10.5
b = str(a)
print(a)
print(type(a))
print(b)
print(type(b))

print("End of Floor Data type conversion")
#str to int conversion
print("Start of String Data type conversion")
print("Data type conversion of String to Integer")
a = 'python'
#b = int(a)
print(a)
print(type(a))
print(b)
print(type(b))
print("Getting error of data type conversion String to Integer")
#str to bool conversion
print("Data type conversion of String to Boolean")
a = 'python'
b = bool(a)
print(a)
print(type(a))
print(b)
print(type(b))

#str to floor conversion
print("Data type conversion of String to float")
a = 'python'
#b = float(a)
print(a)
print(type(a))
print(b)
print(type(b))
print("Getting error of data type conversion String to floor")
print("End of String Data type conversion")

#boolean to int conversion
print("Start of Boolean Data type conversion")
print("Data type conversion of Boolean to Integer")
a = True
b = int(a)
print(a)
print(type(a))
print(b)
print(type(b))

#str to bool conversion
print("Data type conversion of Boolean to String")
a = True
b = str(a)
print(a)
print(type(a))
print(b)
print(type(b))

#str to floor conversion
print("Data type conversion of Boolean to float")
a = True
b = float(a)
print(a)
print(type(a))
print(b)
print(type(b))
print("Getting error of data type conversion String to floor")
print("End of String Data type conversion")

Output:

Start of Interger Data type conversion
Data type conversion of Integer to Floor
10
<class 'int'>
10.0
<class 'float'>
Data type conversion of Integer to Boolean
10
<class 'int'>
True
<class 'bool'>
Data type conversion of Integer to String
10
<class 'str'>
True
<class 'bool'>
End of Interger Data type conversion
Start of Floor Data type conversion
Data type conversion of Floor to Integer
10.5
<class 'float'>
10
<class 'int'>
Data type conversion of Floor to Boolean
10.5
<class 'float'>
True
<class 'bool'>
Data type conversion of Floor to String
10.5
<class 'float'>
10.5
<class 'str'>
End of Floor Data type conversion
Start of String Data type conversion
Data type conversion of String to Integer
python
<class 'str'>
10.5
<class 'str'>
Getting error of data type conversion String to Integer
Data type conversion of String to Boolean
python
<class 'str'>
True
<class 'bool'>
Data type conversion of String to float
python
<class 'str'>
True
<class 'bool'>
Getting error of data type conversion String to floor
End of String Data type conversion
Start of Boolean Data type conversion
Data type conversion of Boolean to Integer
True
<class 'bool'>
1
<class 'int'>
Data type conversion of Boolean to String
True
<class 'bool'>
True
<class 'str'>
Data type conversion of Boolean to float
True
<class 'bool'>
1.0
<class 'float'>
Getting error of data type conversion String to floor
End of String Data type conversion

--------------------------------------01/28/2022----------------------------------------------------------------------------------------

Data type conversion (int to float,bool,string)

For below programs collect input from user, pi is constant value 3.14 (print output in formatted way)

#write a program to calculate perimeter of the circle with radius 10.2

perimeter=3.14
radius=10.2
print("Value of the Perimeter is: ",perimeter)
print("Value of the Radius is: ",radius)
per_val=2*perimeter*radius
print("The Output value of perimeter is:",per_val)

#write a program to calculate area of circle with radius (float) (collect using input function)
#write a program to calculate perimeter of the cricle with radius (float) (collect it through input function)

r=float(input("Input Radius : "))
print("The input of raduis is: ",r)
area=3.14*r*r
perimeter=2*3.14*r
print("Area of Circle: ",area)
print("Perimeter of Circle: ",perimeter)

#Collect radius and height from user,calculate Area of cone (area of cone = 0.33 * pi * r * r * h) (int)

perimeter=3.14
r=float(input("Input Radius : "))
h=float(input("Input Height : "))
print("Value of the Perimeter is: ",perimeter)
print("The input of raduis is: ",r)
print("The input of Height is: ",h)
area_of_cone=0.33 * perimeter * r * r * h)
print("Area of Cone is: ",int(area_of_cone))

Output:

Value of the Perimeter is:  3.14
Value of the Radius is:  10.2
The Output value of perimeter is: 64.056
End of First program
Input Radius : 2.5
The input of raduis is:  2.5
Area of Circle:  19.625
Perimeter of Circle:  15.700000000000001
End of Second program
Input Radius : 2.5
Input Height : 2.5
Value of the Perimeter is:  3.14
The input of raduis is:  2.5
The input of Height is:  2.5
Area of Cone is:  16
End of Third program

--------------------------------------01/31/2022----------------------------------------------------------------------------------------
#find out the Area of Geometry
#collect length , breadth , height from user (all of them in float datatype)
#calculate area of geometry : (length * breadth) + (length * height) ==> int format
#Expected output:The Area of Geometry with length {} , breadth {} and height {} is {}

length=float(input("enter the float value of length:"))
breadth=float(input("enter the float value of breath:"))
height=float(input("enter the float value of height:"))

area_of_geometry=(length*breadth)+(length*height)

print("The Area of Geometry with length {} , breadth {} and height {} is {} ".format(length, breadth,height,int(area_of_geometry)))

Output:
enter the float value of length:2.5
enter the float value of breath:2.5
enter the float value of height:2.5
The Area of Geometry with length 2.5 , breadth 2.5 and height 2.5 is 12 

Read About string Indexing and slicing in Python:
*************************************************

Indexing: Indexing is used to obtain individual elements.
Slicing: Slicing is used to obtain a sequence of elements.
Indexing and Slicing can be be done in Python Sequences types like list, string, tuple, range objects.
Indexing starts from 0. Index 0 represents the first element in the sequence.
Negative indexing starts from -1. Index -1 represents the last element in the sequence.


print("This is for example of indexing and slicing in python")
a = "python" #indexing
print(a)
print(a[0]) #p
print(a[3]) #h
print(a[-1]) #n
print(a[-4]) #t

output:
This is for example of indexing and slicing in python
python
p
h
n
t

Slicing:
Slicing (Range Of Indexes):
We can specify a range of indexes.
s[i:j:k] — slice of s from i to j with step k


s=”Python”
print (s[1:3])
#Output:yt
s=”Python”
print (s[0:3])
#Output:Pyt
s="Python"
print (s[:4])
#Output:Pyth
s="Python"
print (s[2:])
#Output:thon
s="Python"
print (s[-2:])
#Output:on
s="Python"
print (s[1:5:2])
#Output:yh

n=[0,1,2,3,4,5]
print(n[:])
#Output:[0, 1, 2, 3, 4, 5]
n=[0,1,2,3,4,5]
print(n[1:3])
#Output:[1, 2]
n=[0,1,2,3,4,5]
print(n[1:])
#Output:[1, 2, 3, 4, 5]
n=[0,1,2,3,4,5]
print(n[:4])
#Output:[0, 1, 2, 3]
n=[0,1,2,3,4,5]
print(n[1:2])
#Output:[1]
print (n[1])
#Output:1
n=[0,1,2,3,4,5]
print(n[1:5:2])
#Output:[1,3]

-------------------------------------------02/01/2022-----------------------------------------------
===============================================================================
feb 1 : work the below slicing example in xls sheet then run the script in IDEL
===============================================================================

#work the below slicing example in xls sheet then run the script in IDEL

Type1: var = "python_interpreter"

print(var[1:3])
print(var[0:5])
print(var[-5:-2])
print(var[:3])
print(var[3:])
print(var[:])
print(val[3:10])
print(val[2:5])
print(val[0:10])
print(val[5:-5])
print(val[2:8])
print(val[:8])
print(val[5:])
print(val[8:12])
print(val[12:5])

Type2:  var = "java_compiler_go"

print(var[2:10])
print(var[2:10:1])
print(var[2:10:2])
print(var[2:10:3])
print(var[-12:10])
print(var[-12:10:1])
print(var[-12:10:2])
print(var[-12:10:3])

print(var[5::1])
print(var[5::2])
print(var[:5:1])
print(var[:-5:1])
print(var[-8::2])

print(val[3:10:1])
print(val[3:10:2])
print(val[3:10:3])
print(val[5:-5:1])
print(val[5:-5:2])
print(val[5:-5:5])
print(val[:8:4])
print(val[5::3])
print(val[::2])
print(val[12:5:3])

-------------------------------------------02/02/2022-----------------------------------------------
===============================
Feb 2
===============================

a="Information_Technology"

print(a[-2:0:-1])
print(a[5:-5:5])
print(a[-5:5:-5])
print(a[5:-5:-5])
print(a[3:9:-1])
print(a[9:-10:-2])
print(a[2:-4:-4])
print(a[-4:2:-2])
print(a[0:-1:-3])
print(a[-3:3:6])
print(a[::-3])
print(a[::-2])
print(a[2:-2:-2])
print(a[2:-2:2])
print(a[5:-5:5])
print(a[3:-3:3])
print(a[::2])
print(a[::-5])

print("First end")
a="python_is_using_interpreter"

print(a[-2:0:-1])
print(a[5:-5:5])
print(a[-5:5:-5])
print(a[5:-5:-5])
print(a[3:9:-1])
print(a[9:-10:-2])
print(a[2:-4:-4])
print(a[-4:2:-2])
print(a[0:-1:-3])
print(a[-3:3:6])
print(a[::-3])
print(a[::-2])
print(a[2:-2:-2])
print(a[2:-2:2])
print(a[5:-5:5])
print(a[3:-3:3])
print(a[::2])
print(a[::-5])

print("second end")

a="computer science"

print(a[-10:10:3])
print(a[-5:-1:1])
print(a[-8:-2:10])
print(a[5::3])
print(a[:5:2])
print(a[10:14:2])
print(a[-10:-3:3])
print(a[5:12:5])
print(a[3:-3:3])
print(a[-5:-3:20])

print("third end")

a="Information_technology"


print(a[-10:10:3])
print(a[-5:-1:1])
print(a[-8:-2:10])
print(a[5::3])
print(a[:5:2])
print(a[10:14:2])
print(a[-10:-3:3])
print(a[5:12:5])
print(a[3:-3:3])
print(a[-5:-3:20])

print("fourth end")
a="Google_chrome_browser"


print(a[-10:10:3])
print(a[-5:-1:1])
print(a[-8:-2:10])
print(a[5::3])
print(a[:5:2])
print(a[10:14:2])
print(a[-10:-3:3])
print(a[5:12:5])
print(a[3:-3:3])
print(a[-5:-3:20])

print("fifth end")


Python String Methods:
*********************
Pre study: https://www.w3schools.com/python/python_ref_string.asp

--------------------------------------02/04/2022----------------------------------------------------------------------------------------

==============================================
String methods Tasks Feb 4
==============================================


Task1:
******
Get one string from user
identify the middle character of the string

c = input("please enter a string: ") #string default
print(c)
length=len(c)
print("Length of string is:",length)
length1=int(len(c)/2)
print("The middle string value is:",length1)
print(c[length1])

Output:

please enter a string: python
python
Length of string is: 6
The middle string value is: 3
h

please enter a string: compute
compute
Length of string is: 7
The middle string value is: 3
p

Task2:
******

string1: ***python***
string1: **python********
string: ********java*******


output: python , java (strip,rstrip,lstrip method *)

Method1:

c = input("please enter a string of strip: ") 
print(c)
c1 = input("please enter a string of lstrip: ") 
print(c1)
c2 = input("please enter a string of rstrip: ") 
print(c2)
print("Using strip:",c.strip("*"))  
c3=(c1.lstrip("*"))
c4=(c3.rstrip("*"))
print("Using lstrip:",c4)
c5=(c2.rstrip("*"))
c6=(c5.lstrip("*"))
print("Using rstrip:",c6)

Output:

please enter a string of strip: ***python***
***python***
please enter a string of lstrip: **python********
**python********
please enter a string of rstrip: ********python*******
********python*******
Using strip: python
Using lstrip: python
Using rstrip: python


Method2:

string1 = input("Enter the first string: ")
string2 = input("Entrer the second string: ")

string1_a = string1.strip("*")
print("The entered first string is: ", string1)
print("String1 after removing the '*' characters: ", string1_a)

string2_a = string2.lstrip("*")
string2_b = string2_a.rstrip("*")

print("The entered second string is: ", string2)
print("String2 after removing the '*' characters: ", string2_b)

Task3: (name<space>float)
*************************
collect three strings from user  name<space>float

string1: "ravi 10.30"  
string2: "meghala 12.19"
string3: "Gokul 20.20"

split + indexing

10.30 + 12.19 + 20.20 ===> output ===> add it 42.69

Method1:
--------
a = input("please enter a First string: ") #string default
b = input("please enter a Second string: ")
c = input("please enter a Third string: ")
print(a)
a1=a.split(' ')
print(a1)
a2=float(a1[1])
#a1=int(a.split(' ')[1])
print(a2)
print(b)
b1=b.split(' ')
print(b1)
b2=float(b1[1])
print(b2)
print(c)
c1=c.split(' ')
print(c1)
c2=float(c1[1])
print(c2)
tot_value=(a2+b2+c2)
print("The total value of above input value is:",tot_value)

Output:

========================================== RESTART: C:\Users\sivar\AppData\Local\Programs\Python\Python310\3.py =========================================
please enter a First string: ravi 10.30
please enter a Second string: meghala 12.19
please enter a Third string: Gokul 20.20
ravi 10.30
['ravi', '10.30']
10.3
meghala 12.19
['meghala', '12.19']
12.19
Gokul 20.20
['Gokul', '20.20']
20.2
The total value of above input value is: 42.69


Method2:
--------

a = input("Enter the 1st name and float value")
b = input("Enter the 2nd name and float value")
c = input("Enter the 3nd name and float value")
a1=float(a.split()[1])
b1=float(b.split()[1])
c1=float(c.split()[1])
print(a1+b1+c1)

Method3:
--------
string1 = input("Enter the 1st string in the form of 'name float': ")
string2 = input("Enter the 2nd string in the form of 'name float': ")
string3 = input("Enter the 3rd string in the form of 'name float': ")

string1_list = string1.split()
string2_list = string2.split()
string3_list = string3.split()

total = float(string1_list[1]) + float(string2_list[1]) + float(string3_list[1])
print("The addition of the float vales in string1, string2 and string3 is : ", total)

Task4:
******
#collect two strings from user

string1: python
String2: java

output ===> jythonpava64hv

string1: maths
string2: science

output ===> sathsmcience57te

Method1:
********
str1 = input("Enter the 1st string : ")
str2 = input("Enter the 2nd string : ")

str1_len = len(str1)
str2_len = len(str2)

final_str = str2[0] + str1[1:] + str1[0] + str2[1:] + str(str1_len) + str(str2_len)  + str1[int(str1_len/2)] + str2[int(str2_len/2)]

print("The final string is :", final_str)

output:

========================================== RESTART: C:/Users/sivar/AppData/Local/Programs/Python/Python310/1.py =========================================
Enter the 1st string : maths
Enter the 2nd string : science
The final string is : sathsmcience57te

========================================== RESTART: C:/Users/sivar/AppData/Local/Programs/Python/Python310/1.py =========================================
Enter the 1st string : python
Enter the 2nd string : java
The final string is : jythonpava64hv

Method2:

a = input("please enter a First string: ") #string default
b = input("please enter a Second string: ")
#c = input("please enter a Third string: ")
#d = input("please enter a Fourth string: ")
print(a)
print(b)
a1=a[0]
b1=b[0]
a2=a[1:]
b2=b[1:]
print(a1)
print(b1)
print(a2)
print(b2)
a1_len=len(a)
b1_len=len(b)
print(a1_len)
print(b1_len)
a3=a1_len//2
b3=b1_len//2
print(a3)
print(b3)
a4=(a[a3])
b4=(b[b3])
print(a4)
print(b4)
a1_b1_len=str(str(a1_len)+str(b1_len))
print("The Final Output is:",str(b1+a2+a1+b2+a1_b1_len+a4+b4))
a = input("please enter a Third string: ")
b = input("please enter a Fourth string: ")
print(a)
print(b)
a1=a[0]
b1=b[0]
a2=a[1:]
b2=b[1:]
print(a1)
print(b1)
print(a2)
print(b2)
a1_len=len(a)
b1_len=len(b)
print(a1_len)
print(b1_len)
a3=a1_len//2
b3=b1_len//2
print(a3)
print(b3)
a4=(a[a3])
b4=(b[b3])
print(a4)
print(b4)
a1_b1_len=str(str(a1_len)+str(b1_len))
print("The Final Output is:",str(b1+a2+a1+b2+a1_b1_len+a4+b4))

Output:
========================================== RESTART: C:\Users\sivar\AppData\Local\Programs\Python\Python310\3.py =========================================
please enter a First string: python
please enter a Second string: java
python
java
p
j
ython
ava
6
4
3
2
h
v
The Final Output is: jythonpava64hv
please enter a Third string: maths
please enter a Fourth string: science
maths
science
m
s
aths
cience
5
7
2
3
t
e
The Final Output is: sathsmcience57te

Task5:
******
Collect two strings from user

string1: wikipedia
string2: typescript

output: p  +  c   ===> ascii value of p + ascii value of c  ====>  198
(ord , chr)


Method1:
s1 = input("please enter a First string: ") #string default
s2 = input("please enter a Second string: ")
mid1=str(s1[(len(s1)//2)])
mid2=str(s2[(len(s2)//2)])

print(ord(mid1))
print(ord(mid2))
print(ord(mid1)+ord(mid2))

output:

========================================== RESTART: C:/Users/sivar/AppData/Local/Programs/Python/Python310/1.py =========================================
please enter a First string: wikipedia
please enter a Second string: typescript
112
99
211


Method2:
a = input("please enter a First string: ") #string default
b = input("please enter a Second string: ")
print(a)
print(b)
a1=a.find('p')
b1=b.find('c')
print(a1)
print(b1)
print("Find out the value of string1:",a[a1])
print("Find out the value of string2:",b[b1])

print("The ASCII value of '" + a[a1] + "' is", ord(a[a1]))
print("The ASCII value of '" + b[b1] + "' is", ord(b[b1]))
a2=ord(a[a1])
b2=ord(b[b1])

print(f"Based on the above ASCII value({ord(a[a1])}) of The original value is", chr(ord(a[a1])))
print(f"Based on the above ASCII value({ord(b[b1])}) of The original value is", chr(ord(b[b1])))
print("The Total value is:",int(a2+b2))

Output:
========================================== RESTART: C:\Users\sivar\AppData\Local\Programs\Python\Python310\3.py =========================================
please enter a First string: wikipedia
please enter a Second string: typescript
wikipedia
typescript
4
5
Find out the value of string1: p
Find out the value of string2: c
The ASCII value of 'p' is 112
The ASCII value of 'c' is 99
Based on the above ASCII value(112) of The original value is p
Based on the above ASCII value(99) of The original value is c
The Total value is: 211


Task6:
******
collect one string from user:

string: computer
output: c6r

string: mathematics
output: m9s


a = input("please enter a First string: ")
print(a[0])
print(a[-1])
print(len(a[1:-1]))
b=str(len(a[1:-1]))
print(a[0]+b+a[-1])
a = input("please enter a Second string: ")
print(a[0])
print(a[-1])
print(len(a[1:-1]))
b=str(len(a[1:-1]))
print(a[0]+b+a[-1])

Output:

================================== RESTART: C:/Siva_OldLaptop/Laptop_E_prompt/NOTES/Python/Task_1_to_Task6_02Feb2022.py =================================
please enter a First string: computer
c
r
6
The Final Output is: c6r
please enter a Second string: mathematics
m
s
9
The Final Output is: m9s

Task7
******
Say hello world with python

my_string="Hello, World"
print(my_string)

Task 8

swapcase

a="PYThon"
b=a.swapcase()
print(b)

Hacker Rank:

def swap_case(s):
    b=s.swapcase()
    return b

if __name__ == '__main__':
    s = input()
    result = swap_case(s)
    print(result)


Task9

what's your name

firstname=input("Enter your First name:")
lastname=input("Enter your Last name:")
print("My name is {0} {1}".format(firstname,lastname))

Hacker Rank:

def print_full_name(first, last):
    print("Hello {0} {1}! You just delved into python.".format(first,last))
    
if __name__ == '__main__':
    first_name = input()
    last_name = input()
    print_full_name(first_name, last_name)

Task10:

Mutation


string="Pytcon"
l=list(string)
l[3]="h"
string="".join(l)
print(string)

Python

Hacker Rank:

def mutate_string(string, position, character):
    list1=list(string)
    list1[position]=character
    string="".join(list1)
    return string

if __name__ == '__main__':
    s = input()
    i, c = input().split()
    s_new = mutate_string(s, int(i), c)
    print(s_new)


Task11:

Arithmetic operator

a=int(input("a="))
b=int(input("b="))

a1=a+b
d1=a-b
p1=a*b
print(a1)
print(d1)
print(p1)


Hacker Rank:

if __name__ == '__main__':
    a = int(input())
    b = int(input())
    a1=a+b  
    d1=a-b
    p1=a*b
    print(a1)
    print(d1)
    print(p1)



Task12:
python divison

a=int(input("a="))
b=int(input("b="))
idiv=a//b
fdiv=a/b
print(idiv)
print(fdiv)

Hacker Rank:

if __name__ == '__main__':
    a = int(input())
    b = int(input())
    idiv=a//b
    fdiv=a/b
    print(idiv)
    print(fdiv)

--------------------------------------02/07/2022----------------------------------------------------------------------------------------
=======================
Feb 7
=======================

List

#Create an empty list (two ways)
#Concatenate with [5,6,7,8]
#add 8,9,1,5,6,7,8,1 elements to that list
#Find frequency of 8 (count)
#find the mean of the list
#find sum (List) + min + Max 
#Find median of the list
#remove duplicates from list and give output in the format of tuple

Study: https://www.w3schools.com/python/python_ref_list.asp

#Create an empty list (two ways)
# Creating empty List using []
sample_list = []
print('Sample List: ', sample_list)
# Creating empty List using list constructor
sample_list = list()
print('Sample List: ', sample_list)
#Concatenate with [5,6,7,8]
sample_list2=[5,6,7,8]
print("List with elements:",sample_list2)
sample_list.extend(sample_list2)
print("After concatination empty list is:",sample_list)
#add 8,9,1,5,6,7,8,1 elements to that list
sample_list3= (8,9,1,5,6,7,8,1)
print("Before concatination sample_list3 is:",sample_list3)
sample_list.extend(sample_list3)
print(sample_list)
#Find frequency of 8 (count)
frequency=sample_list.count(8)
print("Frequency of the given value is",frequency)
#find the mean of the list
mean=sum(sample_list)/len(sample_list)
print("Mean of the list is:",mean)
#find sum (List) + min + Max 
print("sum of list is:",sum(sample_list))
print("Minimum element in the list is:",min(sample_list))
print("Maximum element in the list is:",max(sample_list))
#Find median of the list
median=sample_list[(len(sample_list)-1)//2:(len(sample_list)+2)//2]
print("Median of list is:",median)
sample_list1 = set(sample_list)
print("After removing duplicate values:",sample_list1)
print("Printing output in Tuple format",tuple(sample_list1))

Output:

Sample List:  []
Sample List:  []
List with elements: [5, 6, 7, 8]
After concatination empty list is: [5, 6, 7, 8]
Before concatination sample_list3 is: (8, 9, 1, 5, 6, 7, 8, 1)
[5, 6, 7, 8, 8, 9, 1, 5, 6, 7, 8, 1]
Frequency of the given value is 3
Mean of the list is: 5.916666666666667
sum of list is: 71
Minimum element in the list is: 1
Maximum element in the list is: 9
Median of list is: [9, 1]
After removing duplicate values: {1, 5, 6, 7, 8, 9}
Printing output in Tuple format (1, 5, 6, 7, 8, 9)

--------------------------------------02/08/2022----------------------------------------------------------------------------------------

=======================
Feb 8
=======================

Tuple

#Create two tuples (1,4,5,6,7,8) (5,6,7,8,9)
#Find the common elements between two tuples
#Concatenate both tuples and remove duplicates from tuple
#Find the index value of 9 (after concatenation)
#multiply above elements 3 times


tup1 = (1,4,5,6,7,8)
tup2 = (5,6,7,8,9)

print(tup1)
print(tup2)
tuble3=(tup1 + tup2)
result = tuple(set(tup1) & set(tup2))
print("Find the common elements between two tuples::",result)
print("Concatenate both tuples :::",(tuble3))
print("Concatenate both tuples and remove duplicates from tuple:::",set(tuble3))
print("Find the index value of 9 (after concatenation):::",tuble3[9])
Output = [(x * 3) for x in tuble3]
print("Multiply by 3 times:::",Output)

output:
==================================== RESTART: C:/Siva_OldLaptop/Laptop_E_prompt/NOTES/Python/List_Tuple_08Feb2022.py ====================================
(1, 4, 5, 6, 7, 8)
(5, 6, 7, 8, 9)
Find the common elements between two tuples:: (8, 5, 6, 7)
Concatenate both tuples ::: (1, 4, 5, 6, 7, 8, 5, 6, 7, 8, 9)
Concatenate both tuples and remove duplicates from tuple::: {1, 4, 5, 6, 7, 8, 9}
Find the index value of 9 (after concatenation)::: 8
Multiply by 3 times::: [3, 12, 15, 18, 21, 24, 15, 18, 21, 24, 27]

Sets
****
#Create two empty sets
#update set1 with 7,8,9,1,2,3,4,5,0
#update set2 with 4,5,6,0
#check whether set2 is subset of set1 or no ?
#check whether both have common elements are no ?
#remove 8 from set 1 and set 2 ==> find the inferences
#discard 0 from set1 and set2 
#find collection of both sets ===> set1 and set2

set1=set()
set2=set()
print(set1)
print(type(set1))
print(type(set2))
print(set2)
set3={7,8,9,1,2,3,4,5,0}
set1.update(set3)
set2.update({4,5,6,0})
print(set1)
print(set2)
print("Is set1 is subset of set2:",set1.issubset(set2))
print("Common elements in two sets are",set1.intersection(set2))
set1.discard(8)
set2.discard(8)
set2.discard(0)
set1.discard(0)
print(set1.union(set2))

Output:

========================================== RESTART: C:/Users/sivar/AppData/Local/Programs/Python/Python310/5.py =========================================
set()
<class 'set'>
<class 'set'>
set()
{0, 1, 2, 3, 4, 5, 7, 8, 9}
{0, 4, 5, 6}

--------------------------------------02/09/2022----------------------------------------------------------------------------------------

=======================
Feb 9
=======================

Dict (Feb 9)

#create a dictionary
#{1:["english","maths","science"], 2:[10,20,30], 3:["bio-botany","bio-zoology","Algebra"]}
#Extract "bobtn" from above dictionary
#Extract "arbeg" from above dictionary
#print all keys in dictionary and convert it into tuple
#Find the average of all numbers available under key "2"


dict1={1:["english","maths","science"], 2:[10,20,30], 3:["bio-botany","bio-zoology","Algebra"]}
print(dict1)
a=dict1[3]
print("a value is:",a)
b=a[0]
print("a value is:",b)
print("Extract 'bobtn' from above dictionary\n",b[0::2])
a1=a[2]
print("a1 value is:",a1)
print("Extract 'arbeg' from above dictionary\n",a1[-1:1:-1])
print("print all keys in dictionary and convert it into tuple::",tuple(dict1.keys()))
dict2_values=(dict1[2])
print(dict2_values)
dict2_values=sum(dict1[2])
print(dict2_values)
length=len(dict1[2])
print(length)
avg_val=dict2_values/length
print("Find the average of all numbers available under key 2::",int(avg_val))

Output:

========================================== RESTART: C:\Users\sivar\AppData\Local\Programs\Python\Python310\5.py =========================================
{1: ['english', 'maths', 'science'], 2: [10, 20, 30], 3: ['bio-botany', 'bio-zoology', 'Algebra']}
a value is: ['bio-botany', 'bio-zoology', 'Algebra']
a value is: bio-botany
Extract 'bobtn' from above dictionary
 bobtn
a1 value is: Algebra
Extract 'arbeg' from above dictionary
 arbeg
print all keys in dictionary and convert it into tuple:: (1, 2, 3)
[10, 20, 30]
60
3
Find the average of all numbers available under key 2:: 20

--------------------------------------02/11/2022----------------------------------------------------------------------------------------

==========================================
Feb 11
==========================================

Task1:
*****

Li1 = [2,3,4,5,[45,56,67,78,[111,222,333,[5555,3333,[10000,50000,"python","computer"],1111,7777,8888],444,555,666,777],89,23,34]]


5
56
222
50000
put
5555
7777
666
89
on
333
3333

Li1 = [2,3,4,5,[45,56,67,78,[111,222,333,[5555,3333,[10000,50000,"python","computer"],1111,7777,8888],444,555,666,777],89,23,34]]
print(Li1)
print(Li1[3])
print(Li1[4][1])
print(Li1[4][4][1])
print(Li1[4][4][3][2][1])
print(Li1[4][4][3][2][3][3:6])
print(Li1[4][4][3][0])
print(Li1[4][4][3][4])
print(Li1[4][4][6])
print(Li1[4][5])
print(Li1[4][4][3][2][2][-2:])
print(Li1[4][4][2])
print(Li1[4][4][3][1])

Output:
========================================== RESTART: C:\Users\sivar\AppData\Local\Programs\Python\Python310\2.py =========================================
[2, 3, 4, 5, [45, 56, 67, 78, [111, 222, 333, [5555, 3333, [10000, 50000, 'python', 'computer'], 1111, 7777, 8888], 444, 555, 666, 777], 89, 23, 34]]
5
56
222
50000
put
5555
7777
666
89
on
333
3333

Task2
*****

a = [1,2,3,4,[100,101,102,"Computer_science"],200,203]

Extract
#science
#Computer

Li1 = [1,2,3,4,[100,101,102,"Computer_science"],200,203]
print(Li1)
print(Li1[4])
a=(Li1[4][3])
print(a[a.find("_")+1:])
print(a[0:a.find("_")])
#Method2:
print(a[4][3][0:8])
print(a[4][3][9:])
Output:

========================================== RESTART: C:\Users\sivar\AppData\Local\Programs\Python\Python310\2.py =========================================
[1, 2, 3, 4, [100, 101, 102, 'Computer_science'], 200, 203]
[100, 101, 102, 'Computer_science']
science
Computer

Task3
*****

a = [1,2,3,4,[101,102,103,[201,202,[999]], 666, 777]]

Extract
#666
#201
#102
#999
#777

Li1 = [1,2,3,4,[101,102,103,[201,202,[999]], 666, 777]]
print(Li1)
print(Li1[4])
print(Li1[4][4])
print(Li1[4][3][0])
print(Li1[4][1])
print(Li1[4][3][2][0])
print(Li1[4][5])

Output:
========================================== RESTART: C:\Users\sivar\AppData\Local\Programs\Python\Python310\2.py =========================================
[1, 2, 3, 4, [101, 102, 103, [201, 202, [999]], 666, 777]]
[101, 102, 103, [201, 202, [999]], 666, 777]
666
201
102
999
777

Task4:
*****

Li1 = [2,3,"python","hello",4,5,0]  

Extract
#ll
#thon

Li1 = [2,3,"python","hello",4,5,0]  
print(Li1)
print(Li1[3][2:4])
print(Li1[2][2:])

Output:

========================================== RESTART: C:\Users\sivar\AppData\Local\Programs\Python\Python310\2.py =========================================
[2, 3, 'python', 'hello', 4, 5, 0]
ll
thon


Task5:
*****
Li1 = [1,2,3,4,5,[11,22,33,44,55,[111,222,333,444],6666,7777],7777]

Output Prediction 

print(Li1[5][0])
print(Li1[5][6])
print(Li1[5][-2])
print(Li1[5][7])
print(Li1[6])
print(Li1[5][5][1])
print(Li1[-2][-1])
print(Li1[-2][2:4])

output:
========================================== RESTART: C:\Users\sivar\AppData\Local\Programs\Python\Python310\2.py =========================================
11
6666
6666
7777
7777
222
7777
[33, 44]

Task6:
******
a = {1: [1,2,3,"python"], 2:{10:"hello",20:"welcome",40: "science"}, 99: {3,4,5,6}, 40:{1:"zoology", 2:"Botany"}}

#output with below values alone from above set
#py
#ello
#en
#zoo
#Bot

a = {1: [1,2,3,"python"], 2:{10:"hello",20:"welcome",40: "science"}, 99: {3,4,5,6}, 40:{1:"zoology", 2:"Botany"}}
print(a)
print(a[1][3][0:2])
print(a[2][10][1:])
print(a[2][40][3:5])
print(a[40][1][0:3])
print(a[40][2][0:3])

output:
========================================== RESTART: C:\Users\sivar\AppData\Local\Programs\Python\Python310\2.py =========================================
{1: [1, 2, 3, 'python'], 2: {10: 'hello', 20: 'welcome', 40: 'science'}, 99: {3, 4, 5, 6}, 40: {1: 'zoology', 2: 'Botany'}}
py
ello
en
zoo
Bot

Task7:
******
Covert below two lists in to a dictionary

[1,2,3,4,5]
["python","cpp","c","java","php"]

key_list = [1,2,3,4,5]
value_list = ["python","cpp","c","java","php"]

#Method1
print(dict(zip(key_list,value_list)))


#Method2:
dict_from_list = {key_list[i]: value_list[i] for i in range(len(key_list))}
print(dict_from_list)

Output:

========================================== RESTART: C:/Users/sivar/AppData/Local/Programs/Python/Python310/1.py =========================================
{1: 'python', 2: 'cpp', 3: 'c', 4: 'java', 5: 'php'}


Task8:
******
Covert below set in to a list

{5,4,3,6,2,7,1}

sample_set = {5,4,3,6,2,7,1}
my_list = list(sample_set)
print(my_list)

Output:
========================================== RESTART: C:\Users\sivar\AppData\Local\Programs\Python\Python310\2.py =========================================

[1, 2, 3, 4, 5, 6, 7]

Task9:
******
Remove duplicates from below list

[5,4,3,6,2,7,1,2,3,4,1,2,3,4,5,6,5]

list1 = [5,4,3,6,2,7,1,2,3,4,1,2,3,4,5,6,5]
print(list(set(list1)))

output:

========================================== RESTART: C:/Users/sivar/AppData/Local/Programs/Python/Python310/1.py =========================================
{1, 2, 3, 4, 5, 6, 7}

Task10:
******
Convert below one to tuple

[5,4,3,6,2,7,1,2,3,4,1,2,3,4,5,6,5]

list1 = [5,4,3,6,2,7,1,2,3,4,1,2,3,4,5,6,5]
print(tuple(list1))

output:

========================================== RESTART: C:/Users/sivar/AppData/Local/Programs/Python/Python310/1.py =========================================
(5, 4, 3, 6, 2, 7, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6, 5)

Pre study:

https://www.w3schools.com/python/gloss_python_if_statement.asp
https://www.w3schools.com/python/python_conditions.asp
https://www.w3schools.com/python/python_while_loops.asp
https://www.w3schools.com/python/python_for_loops.asp
https://www.w3schools.com/python/python_ref_functions.asp
https://www.w3schools.com/python/python_functions.asp
https://www.w3schools.com/python/python_modules.asp
--------------------------------------02/15/2022----------------------------------------------------------------------------------------
